标题：
c语言函数参数入栈顺序，及局部变量入栈顺序
===============================================================================
时间：
2017-6-4
===============================================================================
正文：
参数入栈顺序:（不同编译器，不同系统会有不同）
gcc在本机上（Thread model: posix
gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4) ）
编译结果为从左往右入栈，且先满足一个类似补全原则
-------------------------------------------
#include <stdio.h>

void test(int a,long b,int c,int d,long e,int f) {
	printf("%p %p %p %p %p %p\n ", &a, &b, &c, &d, &e, &f);
	return;
}

int main() {
	test(100,100,100,100,100,100);
	return 0;
}
--------------------------------------------
上述代码输出结果为：0x7ffd5c89cc7c 0x7ffd5c89cc70 0x7ffd5c89cc78 0x7ffd5c89cc6c 0x7ffd5c89cc60 0x7ffd5c89cc68
可见先a入栈，然后c入栈补全为8字节，然后b入栈，然后d入栈，然后f入栈补全为8字节，然后e入栈
局部变量入栈顺序：
从下往上依次入栈，且数组先入栈，然后按变量所占内存大小大者先入栈：
-----------------------------------------------
#include <stdio.h>


int main() {
	int a = 10;
	char* B = "adfasdas";
	long l;
	int A[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};
	
	char C[] = {'a','b','c','\0'};
	int *aa;
	int *bb;
	int *cc;
	
        int b = 10;
        int c = 10;
        int d = 10;
	char c1;
	char c2;
	char c3;
	char c4;
	printf(" &l  %p\n &A  %p\n &B  %p\n &C  %p\n &aa  %p\n &bb %p\n &cc %p\n &a  %p\n &b  %p\n &c  %p\n &d  %p\n &c1 %p\n &c2 %p\n &c3 \
%p\n &c4 %p\n", &l, &A, &B, &C, &aa, &bb, &cc, &a, &b, &c, &d, &c1, &c2, &c3, &c4);
	return 0;
}
-----------------------------------------------------
结果为：
 &l  0x7ffc6e7cbd20
 &A  0x7ffc6e7cbd40
 &B  0x7ffc6e7cbd18
 &C  0x7ffc6e7cbd90
 &aa 0x7ffc6e7cbd28
 &bb 0x7ffc6e7cbd30
 &cc 0x7ffc6e7cbd38
 &a  0x7ffc6e7cbd08
 &b  0x7ffc6e7cbd0c
 &c  0x7ffc6e7cbd10
 &d  0x7ffc6e7cbd14
 &c1 0x7ffc6e7cbd04
 &c2 0x7ffc6e7cbd05
 &c3 0x7ffc6e7cbd06
 &c4 0x7ffc6e7cbd07
入栈顺序为C,A,cc,bb,aa,l,B,d,c,b,a,c4,c3,c2,c1
===============================================================================
注释：

===============================================================================
其他：
变参函数不能直接读取参数数据，因为很难知道参数入栈顺序，会造成指针指向未知地址
要用<stdarg.h>中的va_list va_start(va_list,fmt or number) va_arg(va_list,type) va_end(va_list)来读取
===============================================================================
获取路径：

===============================================================================